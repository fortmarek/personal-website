{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Marek Fořt",
	"language": "en",
	"home_page_url": "https://marekfort.me/",
	"feed_url": "https://marekfort.me/feed/feed.json",
	"description": "I am a software engineer based in Berlin. Passionate about opensource.",
	"author": {
		"name": "Marek Fořt",
		"url": "https://marekfort.me"
	},
	"items": [
		{
			"id": "https://marekfort.me/blog/package-swift-in-raw-xcode-project/",
			"url": "https://marekfort.me/blog/package-swift-in-raw-xcode-project/",
			"title": "Compiling Package.swift in a raw Xcode project",
			"content_html": "<h3 id=\"motivation\" tabindex=\"-1\">Motivation <a class=\"header-anchor\" href=\"https://marekfort.me/blog/package-swift-in-raw-xcode-project/\">#</a></h3>\n<p>Let me first start with why I even wanted to compile <code>Package.swift</code> in a raw Xcode project, instead of Apple's default package integration.</p>\n<p><a href=\"https://tuist.io/\">Tuist</a> has long had a custom integration of Swift Package Manager dependencies where instead of using the default Xcode integration, which has a myriad of issues, we convert the SPM projects to regular Xcode projects.</p>\n<p>For defining the list of dependencies, we've used a <code>Dependencies.swift</code> manifest but using a custom manifest file broke tools like dependabot. So, for Tuist 4 we're fully moving to <code>Package.swift</code>.</p>\n<p>For users, to be able to edit <code>Package.swift</code> as any other Tuist manifest, we wanted to include it in the project generated by the <code>tuist edit</code> command.</p>\n<h3 id=\"the-how\" tabindex=\"-1\">The how <a class=\"header-anchor\" href=\"https://marekfort.me/blog/package-swift-in-raw-xcode-project/\">#</a></h3>\n<p>Let's start with the first naive approach – simply including the following <code>Package.swift</code> in an Xcode project:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token comment\">// swift-tools-version: 5.9</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">PackageDescription</span>\n\n<span class=\"token keyword\">let</span> package <span class=\"token operator\">=</span> <span class=\"token class-name\">Package</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"PackageName\"</span></span><span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://github.com/Alamofire/Alamofire\"</span></span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"5.8.0\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>If you do that, you will get the following error: <code>No such module 'PackageDescription'</code>. The <code>PackageDescription</code> framework is not included in Xcode projects by default but is inserted by Xcode as part of the default SPM integration.</p>\n<p>But where can we find <code>PackageDescription</code>? We can use the <code>swift package describe --verbose</code> command which evaluates the <code>Package.swift</code> – and to do that, it needs to include the <code>PackageDescription</code> framework.</p>\n<p>A part of that output is, indeed, <code>-L /Applications/Xcode-15.1.0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm/ManifestAPI -lPackageDescription</code> where <code>-L</code> is defined as &quot;Add directory to library link search path&quot; and <code>-l</code> as &quot;Specifies a library which should be linked against&quot;. So, the Swift compiler knows it should try to search for <code>PackageDescription</code> and it also adds the <code>ManifestAPI</code> path to its search paths. The <code>ManifestAPI</code> then contains the <code>PackageDescription</code> itself (more specifically, <code>PackageDescription.swiftmodule</code> and <code>libPackageDescription.dylib</code>).</p>\n<p>We can now leverage this in our raw Xcode project by adding the <code>ManifestAPI</code> path to the <code>FRAMEWORK_SEARCH_PATHS</code> and voila, the project now builds ✨</p>\n<h3 id=\"swift-tools-version\" tabindex=\"-1\">Swift tools version <a class=\"header-anchor\" href=\"https://marekfort.me/blog/package-swift-in-raw-xcode-project/\">#</a></h3>\n<p>But that's not all. We have successfully added the <code>PackageDescription</code> framework, however, we currently don't respect the <code>swift-tools-version</code> defined at the top of the <code>Package.swift</code> file. Our raw Xcode project treats <code>Package.swift</code> as any other Swift file, so how could it?</p>\n<p>Going back to the output of <code>swift package describe --verbose</code>, we will also find the following Swift flag: <code>-package-description-version 5.9.0</code>. For our raw Xcode project, we can simply include this Swift flag in <code>OTHER_SWIFT_FLAGS</code> and that's it! If we need to get the version number dynamically (as we do in tuist), we can use the <code>swift package tools-version</code> command.</p>\n<p>Afterwards, building the <code>Package.swift</code> will succeed <em>and</em> use the right Swift tools version. If you are interested in looking at the actual PR we did for <code>tuist edit</code>, you can find it <a href=\"https://github.com/tuist/tuist/pull/5751\">here</a>.</p>\n",
			"date_published": "2024-01-21T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/tuist-dog-food/",
			"url": "https://marekfort.me/blog/tuist-dog-food/",
			"title": "Dogfooding tuist",
			"content_html": "<p>Dogfooding tuist - that is using tuist to develop tuist - has been an idea brewing for some time. With <a href=\"https://github.com/tuist/tuist/pull/3103\">this</a> PR it will finally become a reality.\nThe driving force behind this was to make tuist <em>better</em>. The fact that when you now develop a feature, you will also interact with tuist means\nthat you can catch bugs earlier. It also means that each contributor will have additional experience of working on a complex project generated by tuist.\nIt should be said as well that not many users use tuist to develop macOS CLI applications - but tuist is a large CLI application, so we can be more confident of recommending tuist for\nthis type of application since each contributor will now test this scenario.</p>\n<p>Doing the work to dogfood tuist would be good enough just for these improvements alone if the contributors' development experience would stay the same or would detriment just slightly.\nBut we have been hitting some quirks of SPM Xcode integration for some time and therefore using a generated Xcode project will make for a much smoother experience.\nNeed to add a file? We've got you covered, you don't have to wait two minutes 'till a package is resolved.\nBesides that, contributors will now be able to use <em>all</em> the tuist features we have come to know and love.</p>\n<p>Want to focus on a specific feature? Let's run <code>tuist focus TuistFeature</code>.\nWould you like to have your modules cached? Yep, <code>tuist cache</code> is here for you! <strong>Note</strong>: If you want to run tuist with your current changes, you'll need to run <code>swift run tuist ...</code>. Running simply <code>tuist ...</code> will use tuist installed on your system.</p>\n<h2 id=\"contributor-s-faq\" tabindex=\"-1\">Contributor's FAQ <a class=\"header-anchor\" href=\"https://marekfort.me/blog/tuist-dog-food/\">#</a></h2>\n<ul>\n<li>Do I have to use tuist-generated project?</li>\n</ul>\n<p>No! If you prefer to edit the project via the SPM Xcode integration, you are free to do so.</p>\n<ul>\n<li>Does this have cons?</li>\n</ul>\n<p>Not many things have only pros - including this one. We'll now need to maintain <code>Package.swift</code> and <code>Project.swift</code> where we aim for both to represent more-or-less the same.\nWe shall look into if we can automate some parts of maintaining <code>Package.swift</code> in the future (and pushing <code>Project.swift</code> to be the real source of truth)</p>\n<p>Let me know if you have any more questions, I'll happily answer them!</p>\n",
			"date_published": "2021-07-19T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/leaving-ackee/",
			"url": "https://marekfort.me/blog/leaving-ackee/",
			"title": "Closing my Ackee Chapter",
			"content_html": "<p>After almost three years, today was my last &quot;proper&quot; day at <a href=\"https://www.ackee.cz/en/\">Ackee</a>. In this post, I'd like to take a quick look back about my experience there\nand what I have learnt. Some comments are more specific to Ackee, while others are more about development agencies in general.</p>\n<h2 id=\"startup-culture-aka-ackee-spirit\" tabindex=\"-1\">Startup Culture aka Ackee Spirit <a class=\"header-anchor\" href=\"https://marekfort.me/blog/leaving-ackee/\">#</a></h2>\n<p>I am not sure how exactly I'd define a startup culture - one could say it's defined by move fast and break things attitude. That was not the case at Ackee.\nWe have definitely tried to do things properly whenever possible (and I believe we have usually succeeded in that). I'd rather define it as being lean and nimble - what I mean by that is\nthat you don't impose on yourself long and tiring processes, if you need to do some change quickly, you actually <em>can</em>. This often results in an innovative company\nwhere you as a developer can mostly occupy yourself with actual coding (although leanness is definitely not the only measure of success).</p>\n<p>The other thing Ackee excels at is maintaining &quot;Ackee Spirit&quot;. The regular events where we could get together and share a good laugh\ntranslate to being a better team (of course, the current pandemic has made that a little bit harder). The summer teambuildings that took place\nat a resort outside of Prague were usually the best - in my opinion, these were also the events that have contributed the most to\ngood inter-relationships. It is hard to <em>truly</em> make friends in the office only. If you run a remote team, these events will be even more important\nfor you than for companies that work from the office. Otherwise, the team members could get quite detached from each other in the long run.</p>\n<h2 id=\"agency-development\" tabindex=\"-1\">Agency Development <a class=\"header-anchor\" href=\"https://marekfort.me/blog/leaving-ackee/\">#</a></h2>\n<p>Ackee is a development agency. This comes with all its pros and cons. What I have loved the most about the agency development is that you get\nto take part in a lot of projects - I have had the pleasure of contributing to projects for WWF, Bundestag (German's parliament), Ethereum and more -\nthat means apps that use navigations, leverage live streams, Swift code generation and working with blockchain and much more.\nFor me, as I was still relatively new to the app development when I started at Ackee, this meant that my growth just skyrocketed.\nYou also get to create a lot of new projects and in each project you can try some new technology - of course, only to a degree as it is desirable\nto have the tech stack across the apps relatively similar.</p>\n<p>This constant change can also be exhausting for some people and it is more than understandable if some want to rather concetrate on a single project.\nOn the other hand, Ackee has been successful at keeping some projects for a very long time, so there are still some apps that you can\nwork on for a longer period.</p>\n<h2 id=\"personal-note\" tabindex=\"-1\">Personal Note <a class=\"header-anchor\" href=\"https://marekfort.me/blog/leaving-ackee/\">#</a></h2>\n<p>I have grown so much in the last three years at Ackee. I have come to Ackee straight outta high school and was just 19 years old and thus Ackee\nwill always be imprinted in my memory as it has been a big part of my formative years. Now, I have been talking about Ackee as a company for the whole post\nbut rather than the company, I mean the individuals that form the company and of whom I have fond memories. I also hope that I can stay in contact with\nat least some of them 💙</p>\n<p>I already know what I will be doing next but that's a story for another time - for now, I will be enjoying time off and live the life fully.</p>\n",
			"date_published": "2021-06-24T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/automata-editor-app/",
			"url": "https://marekfort.me/blog/automata-editor-app/",
			"title": "Finite Automata Editor App",
			"content_html": "<p>As my undergraduate years at FIT CTU in Prague are coming to an end, I am publishing the <a href=\"https://github.com/fortmarek/automata-editor/\">Finite Automata Editor app</a> and the bachelor thesis that was written alongside it.\nYou can find quick videos showcasing its most basic functionality below 👇</p>\n<p><a href=\"https://www.youtube.com/watch?v=th_oZiohWzM\">Automata Editor App Demo</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=Bf5hcEsllnc\">Automata Editor Live Demo</a></p>\n<h2 id=\"what-s-the-app-about\" tabindex=\"-1\">What's the app about <a class=\"header-anchor\" href=\"https://marekfort.me/blog/automata-editor-app/\">#</a></h2>\n<p>The app is, as the name suggests, an editor for finite automata. There are already existing automata editors out there but one thing they lack is ease of use.\nThat is why I have opted to build an app for iPad that will resemble the experience of drawing finite automata on regular paper as much as possible -\nwhile bringing additional features like easy simulation of input to make it even <em>better</em> than drawing on a regular piece of paper.</p>\n<h2 id=\"how\" tabindex=\"-1\">How? <a class=\"header-anchor\" href=\"https://marekfort.me/blog/automata-editor-app/\">#</a></h2>\n<p>This has been a very interesting app to write because it combines the power of <code>PencilKit</code> and <code>CoreML</code>. I have first had to write a custom machine learning model to\nrecognize automata shapes (states, transitions, and cycles). After integrating the CoreML model, I have had to integrate <a href=\"https://alt.fit.cvut.cz/\">ALT library</a> for simulating the input for a given automaton.\nThis library is developed at FIT CTU and is written in C++ - this meant writing Objective-C++ wrappers and then Swift wrappers, so it could be used in the iOS app.\nAfterwards, I have started working on the canvas using SwiftUI and the <a href=\"https://github.com/pointfreeco/swift-composable-architecture\">Composable Architecture</a>.\nChoosing these technologies made it really fun to write the app - and I believe it has also made it easier ✨</p>\n<h2 id=\"additional-reading\" tabindex=\"-1\">Additional Reading <a class=\"header-anchor\" href=\"https://marekfort.me/blog/automata-editor-app/\">#</a></h2>\n<p>This post is only a quick overview - I go down into the nitty-gritty details in my thesis that you can download from <a href=\"https://github.com/fortmarek/bachelor-thesis/blob/master/thesis.pdf\">here</a>. You can also check out the app <a href=\"https://github.com/fortmarek/automata-editor/\">here</a>. I do plan to publish it on the App Store but there are some minor improvements I want to make before doing so - I can send you an invite to TestFlight if you are interested, though. You can either send me a DM on <a href=\"https://twitter.com/marekfort\">Twitter</a> or send me an <a href=\"mailto:marekfort@me.com\">email</a>. If you want to check out the ML model, you can do so <a href=\"https://github.com/fortmarek/automata-editor-model/\">here</a>.</p>\n<p>I'd also appreciate any feedback and thanks for reading!</p>\n",
			"date_published": "2021-05-07T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/art-of-doing-science/",
			"url": "https://marekfort.me/blog/art-of-doing-science/",
			"title": "Review of Art of Doing Science and Engineering",
			"content_html": "<p><a href=\"https://www.amazon.com/Art-Doing-Science-Engineering-Learning/dp/1732265178\">Art of Doing Science and Engineering</a> is mainly meant for researchers in science or engineering spheres but is a great read even if you are not a researcher (which I am not). While some parts of the book do go into some of the more complicated topics of physics, most of the book is understandable without having deep knowledge of it.</p>\n<p>Here are some notes I have gathered over the course of reading this book:</p>\n<ul>\n<li>The main flaw of APL language: it has no redundancy. People do require some redundancy, though.</li>\n<li>&quot;I believe very likely in the future we will have vehicles exploring the surface of Mars. The distance between Earth and Mars at times may be so lrhe the signaling time round-trip could be 20 or more minutes. In the exploration process the vehicle must, therefore, have a fair degree of local control.&quot; This is exactly how it went down!</li>\n<li>Geometry course can be thought of as teachers putting programs into us.</li>\n<li>ISBN has the first symbol to check whether the rest of the code is right using weighted sum. With this it can be checked right when someone types if the code is right. This means the system has a tight feedback loop.</li>\n<li>Two theories can explain the same thing and agree on the same details since only their form is different (quantum mechanics wave-particle duality).</li>\n<li>Optimising a component of a system can hinder the performance of the system as a whole → we should not think of how to make the more concrete thing better. Even though this is hard because thinking about the whole system is very abstract.</li>\n</ul>\n",
			"date_published": "2021-04-18T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/migration/",
			"url": "https://marekfort.me/blog/migration/",
			"title": "Migration Tips - Let Time Work for You",
			"content_html": "<p><a href=\"https://github.com/tuist/tuist\">tuist</a> is an OSS project to help you scale your Xcode projects - it is also a project which codebase has grown over its existence and has almost 100k lines of Swift code.</p>\n<h2 id=\"graph\" tabindex=\"-1\">Graph <a class=\"header-anchor\" href=\"https://marekfort.me/blog/migration/\">#</a></h2>\n<p>At the core of tuist is a graph - <a href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\">DAG</a> to be specific. This graph is used throughout the whole project as it contains all the information about the project - all projects, workspace, targets, dependencies and more. <code>Graph</code> itself and some of its components were unfortunately created as a reference type. I would not say this was a wrong decision at the time it was made (although, I don't have a full context on this) but it has made reasoning about the graph harder as, by nature of reference types, by modifying the graph, it was quite possible we could have influenced a part of a code we were not aware of.</p>\n<p>In the future, we'd also like to let the users modify the graph themselves via plugins and to make the modifying of the graph easier and contained, migrating to a value type has started to appear as an important step we should make. Thus, we have embarked on a <em>migration journey</em>.</p>\n<h2 id=\"first-steps-of-migration\" tabindex=\"-1\">First steps of migration <a class=\"header-anchor\" href=\"https://marekfort.me/blog/migration/\">#</a></h2>\n<p>Before starting a migration, one should think deeply about how to properly execute it - especially when migrating a component that is used throughout the whole codebase and you can not make the migration in one go. That means, that for some period of time, you need to have the old and new components co-exist.</p>\n<p>The first step we have made was more-or-less obvious in our case - take the old reference type <code>Graph</code> and create a new value type <code>ValueGraph</code>.</p>\n<p>But, as mentioned, we could not make the transition in one go. Thus, we had to ensure there was some level of interporability between the types. This is a code that should ideally be shortlived but is vital to a successful migration.</p>\n<p>Once you have the cornerstones of the migration, now comes the hard part - changing all the code that works with the old component.</p>\n<h2 id=\"let-the-time-work-for-you\" tabindex=\"-1\">Let the time work for you <a class=\"header-anchor\" href=\"https://marekfort.me/blog/migration/\">#</a></h2>\n<p>Large-scale migration is not an easy thing to do and it's something that takes considerable time. That's why having some level of interoparibility is crucial since now you can get help from <strong>time and let the time work for you</strong>. How? Well, it's easy, try to make all the new features with the new component - plus when modifying existing features, try to push people to migrate it and only then continue with the business they intended to do in the first place.</p>\n<p>This has multiple benefits:</p>\n<ul>\n<li>people become accustomed to the new component gradually</li>\n<li>migration is done by more people, making it less of a burden for those coordinating the migration</li>\n<li>increases the odds of a successful migration since as we go right on the time axis, we are also progressing with the migration</li>\n</ul>\n<p>Having time on your side is doubly more important in an OSS project where, as maintainers, we have only limited resources to contribute to the migration. Where our graph migration could have been done in a matter of weeks max if we worked on it full-time, making the migration in OSS setting took us months. But without doing the right decisions when starting the migration, we might have never finished.</p>\n",
			"date_published": "2021-03-21T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/mnist-maker/",
			"url": "https://marekfort.me/blog/mnist-maker/",
			"title": "MNIST Maker App",
			"content_html": "<p>Currently, I am working on my bachelor thesis which will be an automata editor for iPad. I needed to recognize some shapes drawn by the user and for that I am using the exquisite framework by Apple, CoreML. But I also needed to create a custom dataset for some of the shapes - and I could not find anything that fit my needs!</p>\n<h2 id=\"what-i-needed\" tabindex=\"-1\">What I needed <a class=\"header-anchor\" href=\"https://marekfort.me/blog/mnist-maker/\">#</a></h2>\n<p>I needed quite a simple app, actually:</p>\n<ul>\n<li>it should be for iPad</li>\n<li>I want to use my Apple Pencil to draw given shapes</li>\n<li>exporting images to iPad Files app</li>\n<li>scaling the image to a given size</li>\n<li>making the image grayscale</li>\n</ul>\n<h2 id=\"solution\" tabindex=\"-1\">Solution <a class=\"header-anchor\" href=\"https://marekfort.me/blog/mnist-maker/\">#</a></h2>\n<p>Well, as you might have guessed from the title - I have not found anything that fit those needs. Alas I built my own solution!</p>\n<p>It turned out to actually be easier than I expected.</p>\n<p>Long story short, I had to</p>\n<ol>\n<li>Create <code>PKCanvasView</code> and wrap it to <code>UIViewRepresentable</code>, so I could use it in SwiftUI</li>\n<li>Add export button and <code>TextEditor</code> for specifying resulting image size</li>\n<li>convert image to desired size + to grayscale</li>\n<li>save it to documents 🥳</li>\n</ol>\n<h2 id=\"result\" tabindex=\"-1\">Result <a class=\"header-anchor\" href=\"https://marekfort.me/blog/mnist-maker/\">#</a></h2>\n<p>You can check out the code on <a href=\"https://github.com/fortmarek/personal-website\">Github</a>.</p>\n<p>To install it on your device, download the code and install it via Xcode. I did think about putting it on AppStore, and I still might do so in the future, but for the time being I'll keep it on Github only 🙂</p>\n<p>Let me know if you'd like to see any improvements or if you stumble upon any issues!</p>\n<p>Below, you can see a quick GIF showing off the functionality:</p>\n<p><img src=\"https://marekfort.me/media/mnist-maker.gif\" alt=\"MNIST Maker preview\"></p>\n",
			"date_published": "2021-03-11T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/importance-of-dotfiles/",
			"url": "https://marekfort.me/blog/importance-of-dotfiles/",
			"title": "Importance of dotfiles",
			"content_html": "<p>Recently, during macOS update, my Mac went bust. After some time in the recovery mode I was like &quot;at least I have the Time Machine backup&quot;. I clicked the button to restore from my Time Machine, went to do some other things and after two hours I came to look how it was going. &quot;Time Machine backup failed&quot;. Well, not great. I tried this for the second time with the same result. Since I wanted to do a clean install for some time, I thought that somebody is telling me now is the time. Clean install it is then.</p>\n<p>After I was on my fresh macOS, I wanted to configure my CLI environment. And rather getting back to the unorganized dotfiles mess I had before, I decided to make it properly this time.</p>\n<h1 id=\"why-you-should-version-your-dotfiles\" tabindex=\"-1\">Why you should version your dotfiles <a class=\"header-anchor\" href=\"https://marekfort.me/blog/importance-of-dotfiles/\">#</a></h1>\n<p>I spend a <em>lot</em> of time in the CLI, therefore I find it very important that it is setup in a way I like. That is not only because I want the time I spend in my CLI to be pleasant (although, that is absolutely a good reason!) but also to be <em>efficient</em>.</p>\n<p>To achieve that it is important to have a look at your dotfiles.</p>\n<p>While a lot of users do personalize their CLI in some way, it is not at all so common that people version their changes to them. They are also strewn all around the home directory and it is very hard to be sure where you can find what. As a result, this might make it harder for you to make customizations, so in a lot of cases you will not make that small change that might make your life a little better at all. But in the long run this all adds up.</p>\n<p>This was true in my case, too - I had no organization of my dotfiles and often I did not want to make a change because I was worried I might screw it up.</p>\n<p>I have realized sometime ago I should do something with this but I just did not find the time - well, until I had to.</p>\n<h1 id=\"my-dotfiles\" tabindex=\"-1\">My dotfiles <a class=\"header-anchor\" href=\"https://marekfort.me/blog/importance-of-dotfiles/\">#</a></h1>\n<p>Instead of having the dotfiles for myself, I wanted to share them. I started with <a href=\"https://github.com/holman/dotfiles\">dotfiles by Zach Holman</a> and then made adjustments to feel more at home - you can check the repo out <a href=\"https://github.com/fortmarek/dotfiles\">here</a>.</p>\n<p>One of the more notable changes have been adding <code>oh-my-zsh</code> on top of <code>zsh</code>. Why? Well, a) <code>oh-my-zsh</code> has a great selection of themes. b) they have great plugins.</p>\n<p>Some of the plugins I use are:</p>\n<ul>\n<li><a href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git\">git</a> for speeding up working with git. Want to add unstaged changes with a message? <code>gcam &quot;My commit message&quot;</code>. Want to pull changes? <code>gl</code>. And lots more - I sometimes do use GUI for git but for most common tasks, <code>git</code> CLI helps me to work so much faster.</li>\n<li><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\">zsh-syntax-highlighting</a> - having quick feedback about what you write in the command line is crucial - there is no reason to see whether your command is valid before you hit that enter =&gt; just leverage the power of auto-highlighting!</li>\n<li><a href=\"https://github.com/agkozak/zsh-z\">z</a>: sometimes, it feels slow navigating in the CLI around different directories. <code>z</code> can make this faster as it saves the directories you <code>cd</code> into and then chooses the most common one. Eg if you often <code>cd</code> into <code>~/.dotfiles</code>, next time you can just run <code>z d</code>. That's it!</li>\n<li><a href=\"https://github.com/zsh-users/zsh-autosuggestions\">zsh-autosuggestions</a>: Yes, finding that command you ran two hours ago can be done by hitting arrow up repeatedly. But why make your life difficult if you can just start typing the command and get it completed automatically? Of course you need to know what the command starts with - otherwise, I find it manually via <code>history | grep &quot;keyword&quot;</code> (let me know if there is some awesome plugin for this 😉)</li>\n</ul>\n<p>Apart from <code>oh-my-zsh</code>, I have also added for example keybindings for Xcode - this can be especially helpful if you reinstall Xcode because in that case you'd lose them (happened to me on multiple occassions).</p>\n<h1 id=\"share\" tabindex=\"-1\">Share <a class=\"header-anchor\" href=\"https://marekfort.me/blog/importance-of-dotfiles/\">#</a></h1>\n<p>I am not saying that the dotfiles I have are the best or that they will work for you. The point of this post is to share my experience and encourage you to invest in your environment. Let me know what your dotfiles look like and what has been working for <em>you</em>. Thanks for reading! ✨</p>\n",
			"date_published": "2021-02-14T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/user-friendly-design-book/",
			"url": "https://marekfort.me/blog/user-friendly-design-book/",
			"title": "Review of User Friendly; How the Hidden Rules of Design Are Changing the Way We Live, Work, and Play",
			"content_html": "<p><a href=\"https://www.amazon.com/User-Friendly-Hidden-Design-Changing/dp/0374279756\">User Friendly book</a> is a great resource for understanding what a user friendly design even is, how to make one and how it influences us, as the users.</p>\n<p>Here is some of the insights I have gained from this book:</p>\n<ul>\n<li>To let humans use machines/apps comfortably, we need to have tight feedback loops - that way one knows immediately the effects of one's action and how the subject reacts to it.</li>\n<li>What's user friendly design? Well, it's the type of design that the user does not normally think about because it doesn't get in the way of what people actually want to achieve!</li>\n<li>One of the big design hurdles that big companies face is how to offer more with less friction instead of just offering more - that is how to properly intertwine features, so they seamlessly work together. The problem of big companies to achieve that goal is that they have numerous teams and it's really hard to make those teams work seamlessly work together while sharing a single vision they could strive for. Instead teams wrok by themselves, only creating more features.</li>\n<li>But all of us in tech industry should also note what effects the things we build have - as today's apps quite often play on people's tendency for addictions and the rush from eg. getting a Tinder match.</li>\n</ul>\n<p>I can wholeheartedly recommend this book - even if you are not a designer, nor a developer, I believe this book is for almost anyone.</p>\n",
			"date_published": "2021-01-24T00:00:00Z"
		}
		,
		{
			"id": "https://marekfort.me/blog/loading-dynamic-arguments/",
			"url": "https://marekfort.me/blog/loading-dynamic-arguments/",
			"title": "Loading Dynamic Arguments with the new ArgumentParser by Apple",
			"content_html": "<p>Apple has recently announced a new ArgumentParser library that leverages property wrappers and is a great example of a well-written declarative API. But the declarative nature of it comes with some drawbacks – mainly that if you need to do something custom that the library is not built for, you will need to get creative.</p>\n<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://marekfort.me/blog/loading-dynamic-arguments/\">#</a></h2>\n<p>I have recently finished the migration from a parser that is used in TSCUtility library (currently still used by SPM) to the new one for tuist that helps with the maintenance and work with Xcode projects. Most of the migration was smooth 🙇‍♂️ with the exception of one command. That command is called <code>scaffold</code> and let me just quickly introduce it to you. When you run <code>tuist scaffold framework --name FrameworkName</code> it generates a new component in your project from a template called <code>framework</code>. Every template has its own manifest called <code>Template.swift</code> and has its own set of arguments.</p>\n<p>What we want to do is parse <code>tuist scaffold framework</code>, the process that the user is creating a template called <code>framework</code>, then parse the manifest in <code>framework</code> directory and then add its arguments and let the ArgumentParser do the rest for us. Oof, this is a lot, we’ll go through this step-by-step, so don’t worry.</p>\n<h2 id=\"starting-out\" tabindex=\"-1\">Starting out <a class=\"header-anchor\" href=\"https://marekfort.me/blog/loading-dynamic-arguments/\">#</a></h2>\n<p>Let’s get our hands dirty with some code 😉 If you want to follow along, you can download the starter project here. If you don’t, that’s fine, too 👍\nThis is what our command implementation initially looks like:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">ArgumentParser</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Argument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> template<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">preprocess</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Obtaining template name</span>\n        <span class=\"token keyword\">let</span> templateName <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// Based on template name find its manifest</span>\n        <span class=\"token keyword\">let</span> manifestPath <span class=\"token operator\">=</span> <span class=\"token class-name\">FileManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>currentDirectoryPath <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\"/</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">templateName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">/manifest.json\"</span></span>\n        <span class=\"token comment\">// Obtain data</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> manifestPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Parse the attributes</span>\n        <span class=\"token keyword\">let</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We are leveraging a custom function <code>preprocess</code> as we want to add the custom arguments before the parsing process starts. This is run before <code>Scaffold.main()</code> with <code>try? Scaffold.preprocess(CommandLine.arguments)</code> in <code>main.swift</code>. To properly handle errors you will need to define a custom <code>main</code> function for <code>ScaffoldCommand</code>, but that is out of scope for this tutorial. <code>Preprocess</code> function now finds <code>manifest.json</code> with the directory from the user input and parses the attributes defined there. In the example project we have an array of <code>[“name”]</code>.</p>\n<p>Let’s now try to run <code>scaffold framework --name FrameworkName</code>. But if you do so, you’ll get the following error: <code>Error: Unexpected argument 'FrameworkName'</code>. If you think about it, it makes sense – we are not defining a <code>--name</code> parameter, therefore the <code>ArgumentParser</code> has no chance to successfully parse the input.\nNote About how ArgumentParser works\nThis is where we need to make a little detour to understand how ArgumentParser works under the hood in order to be able to inject our dynamic arguments. What we could boil our command down to is something like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Argument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> template<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>As you can see, ArgumentParser is somehow magically able to recognize the arguments you want parsed just from the fact that you declare them with an appropriate property wrapper (in our case <code>@Argument</code>). If you want a full explanation of everything that happens during the parsing process, I’d recommend this great post. But what’s sufficient for us to know is that for every command ArgumentParser initializes <code>ArgumentSet</code>, which is what’s used in the subsequent parsing. If you look into the source code, this is how the initialization looks like:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">ArgumentSet</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> type<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableArguments</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">ArgumentSet</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">(</span>reflecting<span class=\"token punctuation\">:</span> type<span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>children\n      <span class=\"token punctuation\">.</span>compactMap <span class=\"token punctuation\">{</span> child <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span>\n          <span class=\"token keyword\">var</span> codingKey <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> parsed <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">ArgumentSetProvider</span>\n          <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// Property wrappers have underscore-prefixed names</span>\n        codingKey <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>codingKey<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"_\"</span></span> <span class=\"token operator\">?</span> codingKey<span class=\"token punctuation\">.</span><span class=\"token function\">dropFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> codingKey<span class=\"token punctuation\">.</span><span class=\"token function\">dropFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">InputKey</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> codingKey<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parsed<span class=\"token punctuation\">.</span><span class=\"token function\">argumentSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>additive<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This is the line that interests us the most: <code>let a: [ArgumentSet] = Mirror(reflecting: type.init())</code>. In other words, ArgumentParser iterates through the children of the command’s mirror and that is how it’s able to magically recognize the arguments just from their declaration 🤯</p>\n<h2 id=\"leveraging-our-new-knowledge\" tabindex=\"-1\">Leveraging our New Knowledge <a class=\"header-anchor\" href=\"https://marekfort.me/blog/loading-dynamic-arguments/\">#</a></h2>\n<p>With our new findings we should be able to inject our dynamic arguments. To do so we can use <code>CustomReflectable</code> where we will pass our custom array of children. But before doing that we need to save the attributes from <code>manifest.json</code> – however, this is pretty easy:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">preprocess</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">let</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">.</span>attributes <span class=\"token operator\">=</span> attributes\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We are just saving <code>attributes</code> to its <code>static</code> counterpart. We want it to be <code>static</code> because we have no instance of <code>Scaffold</code> command that we could use. Alas we can now add them to the <code>CustomReflectable</code> protocol implementation:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CustomReflectable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> customMirror<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Mirror</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// #1</span>\n        <span class=\"token keyword\">let</span> attributesChildren<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">.</span>attributes\n            <span class=\"token comment\">// #2</span>\n            <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>shortAndLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// #3</span>\n            <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// #4</span>\n        <span class=\"token keyword\">let</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"template\"</span></span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> _template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// #5</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> children <span class=\"token operator\">+</span> attributesChildren<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Soo, that’s a little bit less straightforward code, but let’s go through it:\nIn <code>#1</code> we are just iterating through the <code>attributes</code> array that we have declared. In <code>#2</code> we are initializing a tuple <code>(name: String, option: Option&lt;String&gt;)</code>. <code>name</code> is the name of the attribute, but what is <code>Option&lt;String&gt;</code>? Well, this is the property wrapper that you would normally declare this way:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Option</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>shortAndLong<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span></code></pre>\n<p>But we obviously cannot do that, thus we need to initialize it directly. In <code>#3</code> we are then creating the <code>Mirror.Child</code> which is what we return in the end. In <code>#4</code> we are adding our <code>@Argument template</code>. For the value of the child we need to pass <code>_template</code> which is how we get the property itself, not its wrapped value (aka <code>Argument&lt;String&gt;</code>). And finally in <code>#5</code> we are just returning the <code>Mirror</code> itself with our initialized command and children of <code>attributes</code> and <code>template</code>.\nHopefully, we will now be able to simply run <code>scaffold framework --name FrameworkName</code> and all will go well. But I have bad news – it won’t 😞 If you do, this is the error you will receive:\n&quot;Argument <code>name</code> is defined without a corresponding <code>CodingKey</code>.&quot;\n<code>CodingKey</code>, well, that sounds like somewhere decoding is failing 🤔</p>\n<h2 id=\"decoding\" tabindex=\"-1\">Decoding <a class=\"header-anchor\" href=\"https://marekfort.me/blog/loading-dynamic-arguments/\">#</a></h2>\n<p>If you look at <code>ParsableCommand</code> protocol definition, you will see that it also conforms to <code>ParsableArgument</code>, which then conforms to <code>Decodable</code>. But what exactly is wrong? Well, in our custom mirror we told the <code>ArgumentParser</code> what arguments it should <em>expect</em>, but it does not parse the values themselves. If we look at our example, we successfully parse our <code>@Argument template</code>, but fail to decode the dynamic <code>--name</code> option. That is because <code>ArgumentParser</code> expects the <code>--name</code> option to be there, but when it gets to decoding it, it does not know how, since it is not defined in the compiler-generated <code>Decodable</code> implementation. But we can fix that 💪 Let’s just define our custom <code>init(from decoder: Decoder) throws</code> method – firstly, without our dynamic arguments:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">CodingKeys</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CodingKey</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> template\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>from decoder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Decoder</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">container</span><span class=\"token punctuation\">(</span>keyedBy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CodingKeys</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    template <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Argument</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>wrappedValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Necessary for conforming `ParsableArguments`</span>\n<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Most of the code might be familiar to you – we define custom <code>CodingKeys</code> <code>enum</code> that contains our <code>template</code> argument and then we decode it as <code>String</code>. Simple! But we are still not handling our custom arguments ☝️</p>\n<p>We’ll add another case to our <code>CodingKeys</code> <code>enum</code> called <code>dynamic(String)</code>. This will encapsulate all our dynamic arguments. Unfortunately, Swift is now not able to automatically convert the individual cases to <code>String</code>. We’ll give it a helping hand:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">CodingKeys</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CodingKey</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> template\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> stringValue <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string-literal\"><span class=\"token string\">\"template\"</span></span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>template\n        <span class=\"token keyword\">case</span> stringValue <span class=\"token keyword\">where</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> stringValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"template\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> name\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Not used</span>\n    <span class=\"token keyword\">var</span> intValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>intValue <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We only need the computed <code>stringValue</code>and custom initializer from <code>stringValue</code>.\nAnd now the final piece of the puzzle:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token comment\">// #1</span>\n<span class=\"token keyword\">var</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>from decoder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Decoder</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">container</span><span class=\"token punctuation\">(</span>keyedBy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CodingKeys</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    template <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// #2</span>\n    <span class=\"token keyword\">try</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> name <span class=\"token keyword\">in</span>\n        attributes<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In <code>#1</code> we define a new property <code>attributes</code> that is a dictionary of <code>[String: String]</code> where the key will be the name of the attribute and the value will be … well, the value from the user input. In <code>#2</code> we iterate through <code>Scaffold.attributes</code> (not to be confused with our new property) and decoding them in a similar fashion as we did with <code>template</code> – now we are just saving our result to our new dictionary.</p>\n<h2 id=\"finish-line\" tabindex=\"-1\">Finish line <a class=\"header-anchor\" href=\"https://marekfort.me/blog/loading-dynamic-arguments/\">#</a></h2>\n<p>Yep, we are nearing the finish line 🏁  Let’s make a final addition to our code and add the following to the <code>run</code> function:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now when you run <code>scaffold framework --name MyFramework</code> you will see:</p>\n<pre><code>framework\n[&quot;name&quot;: &quot;FrameworkName&quot;]\n</code></pre>\n<p>And that is exactly what we want, finally 🥳  Now, we could even add a new <code>manifest.json</code> with <code>[&quot;platform&quot;]</code> to the <code>app</code> directory. When we call <code>scaffold app --platform iOS</code> everything still works!\nRecap of what we have just achieved:</p>\n<ol>\n<li>Preprocess our input and recognize the name of template</li>\n<li>Load a <code>.json</code> file in a directory of the preprocessed template</li>\n<li>Parse <code>.json</code> and dynamically add its attributes to <code>ParsableCommand</code></li>\n<li>Created a Swift CLI with ArgumentParser that can now work with dynamic attributes ✅\nI feel that’s a lot 😉 You can go ahead and play with the final project which you can find here.</li>\n</ol>\n<p><em>Originally published at <a href=\"https://www.ackee.cz/blog/en/argumentparser-loading-dynamic-arguments/\">Ackee</a>.</em></p>\n",
			"date_published": "2020-08-05T00:00:00Z"
		}
		
	]
}
